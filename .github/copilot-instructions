# Instructions for GitHub Copilot

## Project Context

This is a React TypeScript application using Vite, Tailwind CSS, and Vitest for testing. The project emphasizes clean, maintainable code with minimal abstractions.

## Key Principles

### Abstraction Rules

- Avoid creating custom hooks for simple operations
- Only abstract when there's genuine complexity or reusability
- Inline simple useMemo/useCallback instead of wrapping in hooks
- Rule: If abstraction is longer than usage, don't abstract

### Code Quality

- Always use TypeScript interfaces for component props
- Include Error Boundaries for component isolation
- Add accessibility features (ARIA labels, keyboard navigation)
- Write defensive code with proper null checks

### Component Structure

- Single responsibility components
- Separate concerns clearly
- Co-locate related files
- Use proper file organization

### Performance

- Use React.memo, useMemo, useCallback appropriately
- Stable event handlers to prevent unnecessary re-renders
- Proper dependency arrays

### Testing

- Components should be testable in isolation
- Use React Testing Library
- Cover main functionality and edge cases

## Specific Examples

### ✅ Good: Complex Hook (Keep)

```typescript
const useTreeState = () => {
  const [selectedId, setSelectedId] = useState(null);
  const [expandedNodes, setExpandedNodes] = useState(new Set());
  // Multiple related handlers...
  return { selectedId, expandedNodes, handleSelect, handleToggle };
};
```

### ❌ Bad: Simple Wrapper Hook (Remove)

```typescript
const useSelectedNode = (id, map) => {
  return useMemo(() => map.get(id), [id, map]);
};
```

### ✅ Good: Inline Simple Logic

```typescript
const selectedNode = useMemo(
  () => (selectedId ? nodeMap.get(selectedId) || null : null),
  [nodeMap, selectedId]
);
```

## File Structure

```
src/
├── components/     # Single-responsibility UI components
├── hooks/         # Only complex, reusable state logic
├── types/         # Shared TypeScript interfaces
├── constants/     # Configuration and constants
└── utils/         # Pure business logic functions
```

Follow these guidelines strictly to maintain code quality and consistency.
